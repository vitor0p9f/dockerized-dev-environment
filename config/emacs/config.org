#+title: Emacs configuration
#+author: Vítor Pereira Fontes
#+date: 2024-11-10
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Repositories

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

* 'use-package' configuration

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Babel configuration

** Tangle code blocks on save

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))

  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.config/emacs/config.org"))

      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Identation on org files

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
			     (setq indent-tabs-mode nil)
			     (setq tab-width 2)
			     (org-indent-mode)))
#+end_src

** Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :config
    (setq org-bullets-bullet-list '("◉" "○" "✸" "✿")))
#+end_src

* Packages

** LSP modes

*** Elixir

#+begin_src emacs-lisp
  (use-package elixir-mode)
#+end_src

** Straight

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* LSP

** LSP bridge

*** Dependencies

#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

*** Installation

#+begin_src emacs-lisp
  (use-package lsp-bridge
    :straight '(lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge"
                           :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
                           :build (:not compile))
    :init
    (global-lsp-bridge-mode))
#+end_src

*** Configuration

#+begin_src emacs-lisp
  (setq lsp-bridge-enable-hover-diagnostic t) ;; Shows diagnostic tooltip when the cursor hover the error diagnostic
#+end_src

** LSP servers

*** Elixir

#+begin_src emacs-lisp
  (add-hook 'elixir-mode-hook #'lsp-bridge-mode)
#+end_src

* UI

** Emacs configuration

*** Line numbers

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+end_src

*** Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Doom modeline

**** Font and icons

#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Fira Code Nerd Font"))
#+end_src

**** Installation

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

*** Theme

#+begin_src emacs-lisp
  (use-package kanagawa-themes
    :config
    (load-theme 'kanagawa-dragon t))
#+end_src

*** Font size

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 120)
#+end_src

*** General identation (2 spaces)

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq-default standard-indent 2)
#+end_src
